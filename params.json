{"name":"Swagger-maven-plugin","tagline":"A maven build plugin which helps you generate Swagger JSON and API document during build phase","body":"# Swagger Maven Plugin [![Build Status](https://travis-ci.org/kongchen/swagger-maven-plugin.png)](https://travis-ci.org/kongchen/swagger-maven-plugin)\r\nThis plugin can let your Swagger annotated project generate **Swagger JSON** and your **customized API documents** in build phase.\r\n\r\nYou must already known what is Swagger JSON, check the results of this plugin generates [here](https://github.com/kongchen/swagger-maven-example/tree/master/generated/swagger-ui) to see if it is what you want.\r\n\r\nWhat is *customized API document*? Here're two screenshots:\r\n<img src=\"https://cloud.githubusercontent.com/assets/1485800/4130419/c121d19c-3336-11e4-921f-ca8207ed9053.png\" width=\"50%\"/>\r\n<img src=\"https://cloud.githubusercontent.com/assets/1485800/4130438/28359ea4-3337-11e4-8c1a-5d9b06854e3f.png\" width=\"50%\"/>\r\n\r\n\r\n# Usage\r\n\r\n## Minimal Configuartion for Swagger JSON\r\n\r\n```xml\r\n<project>\r\n...\r\n<build>\r\n<plugins>\r\n<plugin>\r\n  <groupId>com.github.kongchen</groupId>\r\n  <artifactId>swagger-maven-plugin</artifactId>\r\n  <version>2.3</version>\r\n  <configuration>\r\n    <apiSources>\r\n      <apiSource>\r\n        <locations>sample.api</locations>\r\n        <apiVersion>1.0</apiVersion>\r\n        <basePath>http://example.com</basePath>\r\n        <swaggerDirectory>generated/swagger-ui</swaggerDirectory>\r\n      </apiSource>\r\n    </apiSources>\r\n  </configuration>\r\n  <executions>\r\n    <execution>\r\n      <phase>compile</phase>\r\n        <goals>\r\n          <goal>generate</goal>\r\n        </goals>\r\n    </execution>\r\n  </executions>\r\n</plugin>\r\n...\r\n</plugins>\r\n</build>\r\n</project>\r\n```\r\n\r\n### Minimal Configuration for customized API Document\r\n\r\n```xml\r\n<project>\r\n...\r\n<build>\r\n<plugins>\r\n<plugin>\r\n  <groupId>com.github.kongchen</groupId>\r\n  <artifactId>swagger-maven-plugin</artifactId>\r\n  <version>2.3</version>\r\n  <configuration>\r\n    <apiSources>\r\n      <apiSource>\r\n        <locations>sample.api</locations>\r\n        <apiVersion>1.0</apiVersion>\r\n        <basePath>http://example.com</basePath>\r\n        <outputTemplate>/markdown.mustache</outputTemplate>\r\n        <mustacheFileRoot>${basedir}/src/main/resources/</mustacheFileRoot>\r\n        <outputPath>${basedir}/generated/document.html</outputPath>\r\n      </apiSource>\r\n    </apiSources>\r\n  </configuration>\r\n  <executions>\r\n    <execution>\r\n      <phase>compile</phase>\r\n        <goals>\r\n          <goal>generate</goal>\r\n        </goals>\r\n    </execution>\r\n  </executions>\r\n</plugin>\r\n...\r\n</plugins>\r\n</build>\r\n</project>\r\n```\r\n\r\n## Minimal Configuration for Swagger JSON & customized API Document\r\n\r\nJust merge the above 2 configuartions together.\r\n\r\n\r\n## Compelete Configuration\r\n\r\nThe compelete configuration for the plugin lists below, you'll see some advanced configurations there.\r\n\r\nIf you cannot wait to try out the plugin, here's a [sample project](https://github.com/kongchen/swagger-maven-example), go to see how it happens.\r\n\r\n```xml\r\n<project>\r\n...\r\n<build>\r\n<plugins>\r\n<plugin>\r\n  <groupId>com.github.kongchen</groupId>\r\n  <artifactId>swagger-maven-plugin</artifactId>\r\n  <version>2.3</version>\r\n  <configuration>\r\n    <apiSources>\r\n      <apiSource>\r\n<!--Required parameters BEGIN-->\r\n        <locations>sample.api</locations>\r\n        <apiVersion>1.0</apiVersion>\r\n        <basePath>http://example.com</basePath>\r\n<!--Required parameters END-->\r\n\r\n<!--Optional parameters BEGIN-->\r\n        <!---General parameters BEGIN-->\r\n        <apiInfo>\r\n          <title>Swagger Maven Plugin Sample</title>\r\n          <description>Hellow world!</description>\r\n          <termsOfServiceUrl>http://www.github.com/kongchen/swagger-maven-plugin</termsOfServiceUrl>\r\n          <contact>kongchen#gmail$com</contact>\r\n          <license>Apache 2.0</license>\r\n          <licenseUrl>http://www.apache.org/licenses/LICENSE-2.0.html</licenseUrl>\r\n        </apiInfo>\r\n        <overridingModels>/swagger-overriding-models.json</overridingModels>\r\n        <swaggerInternalFilter>com.wordnik.swagger.config.DefaultSpecFilter</swaggerInternalFilter>\r\n        <!---General parameters END-->\r\n\r\n        <!---Document generation parameters BEGIN-->\r\n        <outputTemplate>\r\n          https://raw.github.com/kongchen/api-doc-template/master/v2.0/strapdown.html.mustache\r\n        </outputTemplate>\r\n        <mustacheFileRoot>${basedir}/src/main/resources/</mustacheFileRoot>\r\n        <outputPath>${basedir}/generated/document.html</outputPath>\r\n        <!---Document generation parameters END-->\r\n\r\n        <!---Swagger JSON parameters BEGIN-->\r\n        <swaggerDirectory>generated/swagger-ui</swaggerDirectory>\r\n        <swaggerUIDocBasePath>http://www.example.com/restapi/doc</swaggerUIDocBasePath>\r\n        <useOutputFlatStructure>false</useOutputFlatStructure>\r\n        <!---Swagger JSON parameters END-->\r\n<!--Optional parameters END-->\r\n      </apiSource>\r\n    </apiSources>\r\n  </configuration>\r\n  <executions>\r\n    <execution>\r\n      <phase>compile</phase>\r\n        <goals>\r\n          <goal>generate</goal>\r\n        </goals>\r\n    </execution>\r\n    </executions>\r\n</plugin>\r\n...\r\n</plugins>\r\n</build>\r\n</project>\r\n```\r\n\r\nOne ```apiSource``` can be considered as a set of APIs for one ```apiVersion``` in API's ```basePath```, here's the parameter list of `apiSource`:\r\n\r\n## Required parameters\r\n| name | description |\r\n|------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| `locations` | Java classes containing Swagger's annotation ```@Api```, or Java packages containing those classes can be configured here, using ```;``` as the delimiter. |\r\n| `apiVersion` | The version of the api source. |\r\n| `basePath` | The base path of this api source. |\r\n\r\n## Optional parameters\r\n### General parameters\r\n\r\n| **name** | **description** |\r\n|------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| `apiInfo` | Some information of the API document. |\r\n| `overridingModels` | The name of *overridingModels* file, see more details in sections below. |\r\n| `swaggerInternalFilter` | If not null, the value should be full name of class implementing `com.wordnik.swagger.core.filter.SpecFilter`. This allows you to filter both methods and parameters from generated api. |\r\n\r\n\r\nThe parameters of `apiInfo`:\r\n\r\n| **name** | **description** |\r\n|------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| `title` | The title of your API document. |\r\n| `description` | The brief introduction of your API document. |\r\n| `termsOfServiceUrl` | The URL of your API's terms of service. |\r\n| `contact` | should be an email here. |\r\n| `license` | Your API's license. |\r\n| `licenseUrl` | The license's URL. |\r\n\r\n\r\n\r\n### Document generation parameters\r\n\r\n| **name**| **description** |\r\n|-----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| `outputTemplate` | The path of a mustache template file, see more details in sections below.|\r\n| `mustacheFileRoot` | The root path of your mustache template file. |\r\n| `outputPath` | The path of generate-by-template document, not existed parent directories will be created. If you don't want to generate html api just don't set it. |\r\n\r\n\r\n### Swager JSON parameters\r\n\r\n\r\n| **name**| **description** |\r\n|-----------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| `swaggerDirectory` | The directory of generated Swagger JSON files. If null, no Swagger JSON will be generated. |\r\n| `useOutputFlatStructure` | Indicates whether Swagger JSON will be created in subdirs by path defined in @com.wordnik.swagger.annotations.Api#value (false), or the filename will be the path with replaced slashes to underscores (true). Default: `true` |\r\n| `swaggerUIDocBasePath` | Generally, the `baseUrl` in Swagger JSON's `service.json` is always as same as `basePath` you specified above. However, you can use this parameter to overwrite it. |\r\n\r\n\r\nYou can specify several ```apiSources``` with different api versions and base paths.\r\n\r\n# About the template file\r\n\r\nYou need to specify a mustache template file in ```outputTemplate```.\r\n\r\nIt supports a remote path such as https://raw.github.com/kongchen/api-doc-template/master/v2.0/markdown.mustache but local file is highly recommanded because:\r\n\r\n1. You can modify the template to match your requirement easily.\r\n1. Mustache can use `>localfile` for mustache partials, but you should put the partials in `mustacheFileRoot` if any.\r\n\r\n>E.g: \r\nThe template https://raw.github.com/kongchen/api-doc-template/master/v2.0/strapdown.html.mustache uses\r\n     [`markdown.mustache`](https://raw.github.com/kongchen/api-doc-template/master/v2.0/markdown.mustache) as a partial by this way,\r\n     to use `strapdown.html.mustache` you should put `markdown.mustache` in your local path and tell the path to plugin via `mustacheFileRoot`.\r\n\r\nThere's a [standalone project](https://github.com/kongchen/api-doc-template) for the template files, see more details there and welcome to send pull request.\r\n\r\n# About the overridingModels file\r\n\r\n```overridingModels``` is the name of *overridingModels* file.\r\n\r\nIt will be loaded with [Class#getResourceAsStream](http://docs.oracle.com/javase/7/docs/api/java/lang/Class.html#getResourceAsStream(java.lang.String)).\r\n\r\nExample file below. Note that you can name every mapping the way you want - it's not used for anything. *className* and *jsonString* are used as described [here](https://github.com/wordnik/swagger-core/wiki/overriding-models#in-java-with-swagger-core-version-13x) to create *OverrideConverter* and add it to the *ModelConverters*. \r\n```json\r\n{\r\n\t\"DateTimeMapping\" :\r\n\t{\r\n\t\t\"className\" : \"org.joda.time.DateTime\",\r\n\t\t\"jsonString\" : \"{\\\"id\\\": \\\"DateTime\\\",\\\"properties\\\": {\\\"value\\\": {\\\"required\\\": true, \\\"description\\\": \\\"Date in ISO-8601 format\\\", \\\"notes\\\": \\\"Add any notes you like here\\\", \\\"type\\\": \\\"string\\\", \\\"format\\\": \\\"date-time\\\"}}}\"\r\n\t},\r\n\t\"DateMidnightMapping\" :\r\n\t{\r\n\t\t\"className\" : \"org.joda.time.DateMidnight\",\r\n\t\t\"jsonString\" : \"{\\\"id\\\": \\\"DateTime\\\",\\\"properties\\\": {\\\"value\\\": {\\\"required\\\": true, \\\"description\\\": \\\"Date in ISO-8601 format\\\", \\\"notes\\\": \\\"Add any notes you like here\\\", \\\"type\\\": \\\"string\\\", \\\"format\\\": \\\"date-time\\\"}}}\"\r\n\t}\r\n}\r\n```\r\n\r\n[Versions](https://github.com/kongchen/swagger-maven-plugin/blob/master/CHANGES.md)\r\n==\r\n\r\nThis plugin has 2 serials of versions:\r\n\r\n- 2.x.x : For [Swagger core version >= 1.3.0] (https://github.com/wordnik/swagger-core/wiki/Changelog#v130-aug-12-2013) [swagger-spec 1.2](https://github.com/wordnik/swagger-spec/blob/master/versions/1.2.md)\r\n> **Latest version `2.3` is available in central repository.**\r\n`2.3.1-SNAPSHOT` is the latest SNAPSHOT version.\r\n\r\n- 1.x.x : For [Swagger core version 1.2.x](https://github.com/wordnik/swagger-core/wiki/Changelog#v125-jun-19-2013) swagger-spec 1.1\r\n> **Latest version `1.1.3-SNAPSHOT` is available in sonatype repository.**\r\n\r\n> To use SNAPSHOT version, you need to add plugin repository in your pom.xml first:\r\n\r\n```\r\n<pluginRepositories>\r\n  <pluginRepository>\r\n    <id>sonatype-snapshot</id>\r\n    <url>https://oss.sonatype.org/content/repositories/snapshots/</url>\r\n    <releases>\r\n      <enabled>false</enabled>\r\n    </releases>\r\n    <snapshots>\r\n      <enabled>true</enabled>\r\n    </snapshots>\r\n  </pluginRepository>\r\n</pluginRepositories>\r\n```\r\n\r\n# FAQ\r\n## Dependency conflict\r\nIf you have package depedency conflict issues, such as jackson, joda-time, or [jsr311-api](https://github.com/kongchen/swagger-maven-plugin/issues/81). Run `mvn dependency:tree` to check which package introduces the one conflicts with yours and exclude it using `<exclusion/>` in pom.xml.\r\n> e.g. exclude `javax.ws.rs:jsr311-api:jar:1.1.1:compile` from `swagger-jaxrs_2.10`:\r\n```xml\r\n    <dependency>\r\n        <groupId>com.wordnik</groupId>\r\n        <artifactId>swagger-jaxrs_2.10</artifactId>\r\n        <version>1.3.2</version>\r\n        <exclusions>\r\n            <exclusion>\r\n                <groupId>javax.ws.rs</groupId>\r\n                <artifactId>jsr311-api</artifactId>\r\n            </exclusion>\r\n        </exclusions>\r\n    </dependency>   \r\n```\r\n","google":"UA-5680351-7","note":"Don't delete this file! It's used internally to help with page regeneration."}